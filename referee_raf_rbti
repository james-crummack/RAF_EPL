import nbformat as nbf

# Create the full notebook with all cells integrated
full_cells = []

# Title and setup
full_cells.append(nbf.v4.new_markdown_cell(
    "# üß† Referee Adjustment Factor (RAF) & Referee-Team Bias Index (RTBI)\n"
    "This notebook demonstrates how to compute referee influence on football matches using:\n"
    "- **RAF**: Referee Adjustment Factor (overall influence tendencies)\n"
    "- **RTBI**: Referee-Team Bias Index (per-team deviations)\n"
    "\n"
    "Data Source: `mock_referee_raf_dataset.csv` (synthetic)"
))

# Import libraries
full_cells.append(nbf.v4.new_code_cell(
    "import pandas as pd\n"
    "import numpy as np\n"
    "import matplotlib.pyplot as plt\n"
    "import seaborn as sns\n"
    "from scipy.stats import zscore\n"
    "from math import pi"
))

# Load dataset
full_cells.append(nbf.v4.new_code_cell(
    "df = pd.read_csv('mock_referee_raf_dataset.csv')\n"
    "df.head()"
))

# Calculate referee stats
full_cells.append(nbf.v4.new_markdown_cell("## üéØ Calculate Referee Behavior Stats"))
full_cells.append(nbf.v4.new_code_cell(
    "ref_stats = df.groupby('Referee').agg({\n"
    "    'Fouls_Home': 'mean', 'Fouls_Away': 'mean',\n"
    "    'Cards_Home': 'mean', 'Cards_Away': 'mean',\n"
    "    'Pens_Home': 'mean', 'Pens_Away': 'mean',\n"
    "    'VAR_Overturns': 'mean', 'VAR_Missed': 'mean',\n"
    "    'VAR_Reviews': 'mean', 'Avg_Review_Time': 'mean',\n"
    "    'VAR_Acceptance_Rate': 'mean'\n"
    "}).reset_index()\n"
    "\n"
    "ref_stats['Total_Fouls'] = ref_stats['Fouls_Home'] + ref_stats['Fouls_Away']\n"
    "ref_stats['Total_Cards'] = ref_stats['Cards_Home'] + ref_stats['Cards_Away']\n"
    "ref_stats['Total_Pens'] = ref_stats['Pens_Home'] + ref_stats['Pens_Away']\n"
    "ref_stats['Overturn_Rate'] = ref_stats['VAR_Overturns'] / ref_stats['VAR_Reviews']\n"
    "ref_stats['Miss_Rate'] = ref_stats['VAR_Missed'] / ref_stats['VAR_Reviews']\n"
    "ref_stats = ref_stats.fillna(0)"
))

# Normalize with Z-scores
full_cells.append(nbf.v4.new_markdown_cell("## üìä Normalize and Compute RAF Score"))
full_cells.append(nbf.v4.new_code_cell(
    "metrics = ['Total_Fouls', 'Total_Cards', 'Total_Pens', 'Overturn_Rate', 'Miss_Rate', 'Avg_Review_Time']\n"
    "for m in metrics:\n"
    "    ref_stats[f'{m}_Z'] = zscore(ref_stats[m])\n"
    "\n"
    "ref_stats['RAF_Score'] = (\n"
    "    0.2 * ref_stats['Total_Fouls_Z'] +\n"
    "    0.2 * ref_stats['Total_Cards_Z'] +\n"
    "    0.2 * ref_stats['Total_Pens_Z'] +\n"
    "    0.2 * ref_stats['Overturn_Rate_Z'] +\n"
    "    0.1 * ref_stats['Miss_Rate_Z'] +\n"
    "    0.1 * ref_stats['Avg_Review_Time_Z']\n"
    ")\n"
    "ref_stats[['Referee', 'RAF_Score']].sort_values(by='RAF_Score', ascending=False)"
))

# RTBI Calculation
full_cells.append(nbf.v4.new_markdown_cell("## üßÆ Referee-Team Bias Index (RTBI)"))
full_cells.append(nbf.v4.new_code_cell(
    "# Map referee averages into match-level data\n"
    "ref_avg_map = ref_stats[['Referee']].copy()\n"
    "for metric in ['Fouls_Home', 'Fouls_Away', 'Cards_Home', 'Cards_Away', 'Pens_Home', 'Pens_Away', 'VAR_Overturns', 'VAR_Missed', 'VAR_Reviews']:\n"
    "    ref_avg_map[f'RefAvg_{metric}'] = df.groupby('Referee')[metric].mean().values\n"
    "df = df.merge(ref_avg_map, on='Referee', how='left')\n"
    "\n"
    "def compute_bias(row, team_col, foul_col, card_col, pen_col):\n"
    "    return pd.Series({\n"
    "        'Team': row[team_col],\n"
    "        'Foul_Bias': row[foul_col] - row[f'RefAvg_{foul_col}'],\n"
    "        'Card_Bias': row[card_col] - row[f'RefAvg_{card_col}'],\n"
    "        'Pen_Bias': row[pen_col] - row[f'RefAvg_{pen_col}'],\n"
    "        'Overturn_Bias': row['VAR_Overturns'] - row['RefAvg_VAR_Overturns'],\n"
    "        'Miss_Bias': row['VAR_Missed'] - row['RefAvg_VAR_Missed']\n"
    "    })\n"
    "\n"
    "home_bias = df.apply(lambda row: compute_bias(row, 'Home_Team', 'Fouls_Home', 'Cards_Home', 'Pens_Home'), axis=1)\n"
    "away_bias = df.apply(lambda row: compute_bias(row, 'Away_Team', 'Fouls_Away', 'Cards_Away', 'Pens_Away'), axis=1)\n"
    "team_bias_df = pd.concat([home_bias, away_bias])\n"
    "team_rtbi = team_bias_df.groupby('Team').mean().reset_index()\n"
    "team_rtbi"
))

# Heatmap and radar chart
full_cells.append(nbf.v4.new_markdown_cell("## üìâ RTBI Heatmap & üï∏Ô∏è Radar Chart"))
full_cells.append(nbf.v4.new_code_cell(
    "sns.set(style=\"whitegrid\")\n"
    "plt.figure(figsize=(10, 6))\n"
    "sns.heatmap(team_rtbi.set_index('Team'), annot=True, cmap=\"coolwarm\", center=0, fmt=\".2f\")\n"
    "plt.title(\"Referee-Team Bias Index (RTBI) - Heatmap\")\n"
    "plt.tight_layout()\n"
    "plt.show()\n"
    "\n"
    "def plot_team_radar(team_name):\n"
    "    team_data = team_rtbi[team_rtbi['Team'] == team_name].drop(columns=['Team']).values.flatten().tolist()\n"
    "    labels = team_rtbi.columns[1:].tolist()\n"
    "    num_vars = len(labels)\n"
    "    angles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\n"
    "    team_data += team_data[:1]\n"
    "    angles += angles[:1]\n"
    "    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\n"
    "    ax.plot(angles, team_data, linewidth=2, linestyle='solid')\n"
    "    ax.fill(angles, team_data, alpha=0.4)\n"
    "    ax.set_xticks(angles[:-1])\n"
    "    ax.set_xticklabels(labels)\n"
    "    ax.set_title(f\"RTBI Radar Chart: {team_name}\", size=14)\n"
    "    plt.show()\n"
    "\n"
    "# Example call\n"
    "plot_team_radar('Arsenal')"
))

# Interactive widget cell (markdown to explain)
full_cells.append(nbf.v4.new_markdown_cell("## üéõÔ∏è Interactive RTBI Radar Chart Selector"))

# Widget code cell
full_cells.append(nbf.v4.new_code_cell(
    "import ipywidgets as widgets\n"
    "from IPython.display import display\n"
    "\n"
    "team_dropdown = widgets.Dropdown(\n"
    "    options=team_rtbi['Team'].unique(),\n"
    "    description='Select Team:',\n"
    "    style={'description_width': 'initial'},\n"
    "    layout=widgets.Layout(width='50%')\n"
    ")\n"
    "\n"
    "def update_radar_chart(team_name):\n"
    "    plot_team_radar(team_name)\n"
    "\n"
    "widgets.interact(update_radar_chart, team_name=team_dropdown)"
))

# Save notebook
final_notebook = nbf.v4.new_notebook(cells=full_cells)
final_path = "referee_raf_rtbi_complete.ipynb"
